import pygame
import random

pygame.font.init()

# Global Variables
s_width = 800
s_height = 750
play_width = 300
play_height = 600
block_size = 30

top_left_x = (s_width - play_width) // 2
top_left_y = s_height - play_height - 50

# SHAPE FORMATS
SHAPES = {
    'S': [['.00',
           '00.',
           '...'],
          ['0..',
           '00.',
           '.0.'],
          ['.00',
           '00.',
           '...'],
          ['0..',
           '00.',
           '.0.']], 

    'Z': [['00.',
           '.00',
           '...'],
          ['..0',
           '00.',
           '0..'],
          ['00.',
           '.00',
           '...'],
          ['..0',
           '00.',
           '0..']],

    'I': [['....',
           '0000',
           '....',
           '....'],
          ['.0..',
           '.0..',
           '.0..',
           '.0..'],
          ['....',
           '....',
           '0000',
           '....'],
          ['..0.',
           '..0.',
           '..0.',
           '..0.']], 

    'L': [['..0.',
           '000.',
           '....'],
          ['0..',
           '0..',
           '00.'],
          ['....',
           '000.',
           '.0..'],
          ['.00',
           '..0',
           '..0']], 

    'J': [['.0..',
           '000.',
           '....'],
          ['00.',
           '0..',
           '0..'],
          ['....',
           '000.',
           '..0.'],
          ['..0',
           '..0',
           '.00']], 

    'T': [['.0..',
           '000.',
           '....'],
          ['.0.',
           '00.',
           '.0.'],
          ['....',
           '000.',
           '.0..'],
          ['.0.',
           '.00',
           '.0.']], 

    'O': [['.00.',
           '.00.',
           '....']]
}

# Colors for each piece
COLORS = [(0, 128, 0), (0, 255, 0), (255, 0, 0), (0, 255, 255), (255, 255, 0), (255, 165, 0), (0, 0, 255), (128, 0, 128)]

# Index of each shape
SHAPES_INDEX = ['S', 'I', 'Z','L','J','T','O']  # Add all shapes to this list.

# Class for each piece
class Piece(object):
    def __init__(self, column, row, shape):
        self.column = column
        self.row = row
        self.shape = shape
        self.color = random.choice(COLORS)
        self.rotation = 0

# Create grid
def create_grid(locked_positions={}):
    grid = [[(0,0,0) for x in range(10)] for y in range(20)]
    for y in range(len(grid)):
        for x in range(len(grid[y])):
            if (x, y) in locked_positions:
                c = locked_positions[(x,y)]
                grid[y][x] = c
    return grid

# Convert shape to grid format
def convert_shape_format(piece):
    positions = []
    shape_format = piece.shape[piece.rotation % len(piece.shape)]
    for i, line in enumerate(shape_format):
        row = list(line)
        for j, column in enumerate(row):
            if column == '0':
                positions.append((piece.column + j, piece.row + i))
    return positions

# Check if space is valid
def valid_space(piece, grid):
    accepted_positions = [[(j, i) for j in range(10) if grid[i][j] == (0,0,0)] for i in range(20)]
    accepted_positions = [j for sublist in accepted_positions for j in sublist]
    formatted = convert_shape_format(piece)
    for pos in formatted:
        if pos not in accepted_positions:
            if pos[1] > -1:
                return False
    return True

# Clear rows
def clear_rows(grid, locked):
    inc = 0
    for i in range(len(grid)-1, -1, -1):
        row = grid[i]
        if (0, 0, 0) not in row:
            inc += 1
            ind = i
            for j in range(len(row)):
                try:
                    del locked[(j, i)]
                except:
                    continue

    if inc > 0:
        for key in sorted(list(locked), key=lambda x: x[1])[::-1]:
            x, y = key
            if y < ind:
                newKey = (x, y + inc)
                locked[newKey] = locked.pop(key)

    return inc

# Check if game over
def check_lost(positions):
    for pos in positions:
        x, y = pos
        if y < 1:
            return True
    return False

# Get a new shape
def get_shape():
    return Piece(5, 0, SHAPES[random.choice(SHAPES_INDEX)])

# Draw the grid
def draw_grid(surface, grid):
    for i in range(len(grid)):
        for j in range(len(grid[i])):
            pygame.draw.rect(surface, grid[i][j], (top_left_x + j*30, top_left_y + i*30, 30, 30), 0)

    pygame.draw.rect(surface, (255, 0, 0), (top_left_x, top_left_y, play_width, play_height), 4)
    pygame.display.update()

# Draw the window
def draw_window(surface):
    surface.fill((0,0,0))
    pygame.font.init()
    font = pygame.font.SysFont('comicsans', 60)
    label = font.render('Tetris', 1, (255,255,255))
    surface.blit(label, (top_left_x + play_width / 2 - (label.get_width() / 2), 30))
    pygame.display.update()

# Draw Score and lines
def draw_text(surface, text, size, color, x, y):
    font = pygame.font.SysFont('comicsans', size, bold=True)
    label = font.render(text, 1, color)

    surface.blit(label, (x, y))
def draw_score(surface, score, lines_cleared, x, y):
    draw_text(surface, 'Score: ' + str(score), 30, (255,255,255), x, y)
    draw_text(surface, 'Lines cleared: ' + str(lines_cleared), 30, (255,255,255), x, y + 40)


# Main function
def main(win):
    locked_positions = {} 
    grid = create_grid(locked_positions)
    change_piece = False
    run = True
    current_piece = get_shape()
    next_piece = get_shape()
    clock = pygame.time.Clock()
    fall_time = 0
    fall_speed = 0.27
    level_time = 0
    score = 0
    while run:
        grid = create_grid(locked_positions)
        fall_time += clock.get_rawtime()
        clock.tick()
        if fall_time/1000 >= fall_speed:
            fall_time = 0
            current_piece.row += 1
            if not (valid_space(current_piece, grid)) and current_piece.row > 0:
                current_piece.row -= 1
                change_piece = True
         
        # Clear rows, move other rows down, and increase score
        cleared_rows = clear_rows(grid, locked_positions)
        score += cleared_rows * 10
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    current_piece.column -= 1
                    if not valid_space(current_piece, grid):
                        current_piece.column += 1
                elif event.key == pygame.K_RIGHT:
                    current_piece.column += 1
                    if not valid_space(current_piece, grid):
                        current_piece.column -= 1
                elif event.key == pygame.K_DOWN:
                    current_piece.row += 1
                    if not valid_space(current_piece, grid):
                        current_piece.row -= 1
                elif event.key == pygame.K_UP:
                    current_piece.rotation += 1
                    current_piece.rotation = current_piece.rotation % len(current_piece.shape)
                    if not valid_space(current_piece, grid):
                        current_piece.rotation -= 1

        shape_pos = convert_shape_format(current_piece)
        for i in range(len(shape_pos)):
            x, y = shape_pos[i]
            if y > -1:
                grid[y][x] = current_piece.color
        if change_piece:
            for pos in shape_pos:
                p = (pos[0], pos[1])
                locked_positions[p] = current_piece.color
            current_piece = next_piece
            next_piece = get_shape()
            change_piece = False
            score += 10

        draw_window(win)
        draw_grid(win, grid)
        pygame.display.update()
        if check_lost(locked_positions):
            run = False

    pygame.display.quit()


# Call the main function
def main_menu(win):
    main(win)

win = pygame.display.set_mode((s_width, s_height))
pygame.display.set_caption('Tetris')
main_menu(win)
